from abc import ABC, abstractmethod
from dataclasses import dataclass
from enum import StrEnum, auto
from typing import TYPE_CHECKING, Annotated, Any, Literal

from pydantic import Tag

from crypto.util import to_bytes
from settings import RNG_MOD_PK, TIME_TO_CONSISTENCY

if TYPE_CHECKING:
    from protocol.verification_net.verification_net_timeline import VerificationNetTimeline

class RNGSeedType(StrEnum):
    TRANSACTION = auto()
    CLAIM_STAKE = auto()


@dataclass(frozen=True)
class RNGSeed(ABC):
    """Part of the seed for witness selection RNG. The actual entropy comes from the latest hash of the network
    but to prevent the same nodes from being overloaded by every transaction on that hash we determine the seed
    based on a few extra values as well."""

    rng_type: RNGSeedType
    checksum: str

    @abstractmethod
    def seed_bytes(self) -> bytes:
       ... 

@dataclass(frozen=True)
class TransactionRNGSeed(RNGSeed):

    rng_type: Literal[RNGSeedType.TRANSACTION]
    checksum: str
    mod_payer_public_key: int
    mod_payee_public_key: int


    def __post_init__(self):
        if not 0 <= self.mod_payee_public_key < RNG_MOD_PK:
            raise ValueError(f"mod_payee_public_key must be less than {RNG_MOD_PK}, got {self.mod_payer_public_key}")
        if not 0 <= self.mod_payer_public_key < RNG_MOD_PK:
            raise ValueError(f"mod_payer_public_key must be less than {RNG_MOD_PK}, got {self.mod_payee_public_key}")

    def seed_bytes(self) -> bytes:
        # We use mod pk here instead of pk to reduce RNG manipulation while still
        # selecting different witnesses for transactions between the same nodes on
        # the same checksum.
        return to_bytes((self.checksum, self.mod_payee_public_key, self.mod_payer_public_key))

@dataclass(frozen=True)
class ClaimStakeRNGSeed(RNGSeed):

    rng_type: Literal[RNGSeedType.CLAIM_STAKE]

    def seed_bytes(self) -> bytes:
        return to_bytes(self.checksum)

def get_transaction_rng(vnt: "VerificationNetTimeline", timestamp: float, payer_public_key: str, payee_public_key: str):
    """Get's an RNG seed for witness selection for a standard transaction"""
    checksum = vnt.get_latest_checksum(timestamp - TIME_TO_CONSISTENCY)
    mod_payer_pk = hash(payer_public_key) % RNG_MOD_PK
    mod_payee_pk = hash(payee_public_key) % RNG_MOD_PK
    return TransactionRNGSeed(RNGSeedType.TRANSACTION, checksum=checksum, mod_payer_public_key=mod_payer_pk, mod_payee_public_key=mod_payee_pk)

def get_claim_stake_rng(vnt: "VerificationNetTimeline", timestamp: float):
    """Get's an RNG seed for witness selection for a fund generated by claiming the stakes of other witnesses that acted outside of protocol"""
    checksum = vnt.get_latest_checksum(timestamp - TIME_TO_CONSISTENCY)
    return ClaimStakeRNGSeed(RNGSeedType.CLAIM_STAKE, checksum=checksum)

def get_rng_type(v: Any) -> str:
    if isinstance(v, dict):
        return v["rng_type"]
    return getattr(v, "rng_type")

RNGSeedTypes = (Annotated[TransactionRNGSeed, Tag(RNGSeedType.TRANSACTION)] | Annotated[ClaimStakeRNGSeed, Tag(RNGSeedType.CLAIM_STAKE)])